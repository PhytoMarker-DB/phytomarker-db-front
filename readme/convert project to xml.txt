$outputFile = "angular_code.txt"

# Extensions cibl√©es pour composants, logique m√©tier et routage standalone
$extensions = @(
    # Composants
    "*.component.ts",
    "*.component.html",
    "*.component.scss",

    # Logique m√©tier
    "*.service.ts",
    "*.model.ts",
    "*.guard.ts",
    "*.interceptor.ts",
    "*.directive.ts",
    "*.pipe.ts",

    # Routage Angular 15+ standalone
    "*.routes.ts",
    "app.routes.ts"
)

# Dossiers √† exclure
$excludeFolders = @(
    "node_modules",
    "dist",
    ".angular",
    ".git",
    "e2e",
    "coverage"
)

Write-Host "üîç Extraction du code Angular (composants + logique m√©tier + routes)..."
Write-Host "Extensions incluses : $($extensions -join ', ')"
Write-Host "Dossiers exclus : $($excludeFolders -join ', ')"
Write-Host "Fichier de sortie : $outputFile"

# Vide ou cr√©e le fichier de sortie
Clear-Content -Path $outputFile -ErrorAction SilentlyContinue

# Recherche r√©cursive
Get-ChildItem -Path . -Recurse -Include $extensions -File |
    Where-Object {
        # Exclure les fichiers situ√©s dans les dossiers interdits
        $excludeFolders -notcontains ($_.DirectoryName.Split('\') | Where-Object { $excludeFolders -contains $_ })
    } |
    ForEach-Object {
        Add-Content -Path $outputFile -Value "--- FILE: $($_.FullName.Replace($PWD.Path + '\', '')) ---"
        Get-Content -Path $_.FullName | Add-Content -Path $outputFile
        Add-Content -Path $outputFile -Value "" # Ligne vide entre fichiers
    }

Write-Host "‚úÖ Extraction termin√©e !"
